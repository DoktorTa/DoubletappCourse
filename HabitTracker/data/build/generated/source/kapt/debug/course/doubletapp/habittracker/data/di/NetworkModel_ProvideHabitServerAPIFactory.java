// Generated by Dagger (https://dagger.dev).
package course.doubletapp.habittracker.data.di;

import course.doubletapp.habittracker.data.network.HabitServerAPI;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModel_ProvideHabitServerAPIFactory implements Factory<HabitServerAPI> {
  private final NetworkModel module;

  private final Provider<OkHttpClient> clientProvider;

  public NetworkModel_ProvideHabitServerAPIFactory(NetworkModel module,
      Provider<OkHttpClient> clientProvider) {
    this.module = module;
    this.clientProvider = clientProvider;
  }

  @Override
  public HabitServerAPI get() {
    return provideHabitServerAPI(module, clientProvider.get());
  }

  public static NetworkModel_ProvideHabitServerAPIFactory create(NetworkModel module,
      Provider<OkHttpClient> clientProvider) {
    return new NetworkModel_ProvideHabitServerAPIFactory(module, clientProvider);
  }

  public static HabitServerAPI provideHabitServerAPI(NetworkModel instance, OkHttpClient client) {
    return Preconditions.checkNotNullFromProvides(instance.provideHabitServerAPI(client));
  }
}
