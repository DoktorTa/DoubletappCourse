// Generated by Dagger (https://dagger.dev).
package course.doubletapp.habittracker.di;

import android.content.Context;
import course.doubletapp.habittracker.data.db.HabitDao;
import course.doubletapp.habittracker.data.db.HabitDataBase;
import course.doubletapp.habittracker.data.di.DatabaseModule;
import course.doubletapp.habittracker.data.di.DatabaseModule_ProvideDaoFactory;
import course.doubletapp.habittracker.data.di.DatabaseModule_ProvideDatabaseFactory;
import course.doubletapp.habittracker.data.di.NetworkModel;
import course.doubletapp.habittracker.data.di.NetworkModel_ProvideHabitServerAPIFactory;
import course.doubletapp.habittracker.data.di.NetworkModel_ProvideHttpClientFactory;
import course.doubletapp.habittracker.data.di.RepositoryModule;
import course.doubletapp.habittracker.data.di.RepositoryModule_ProvideRepositoryFactory;
import course.doubletapp.habittracker.data.network.HabitServerAPI;
import course.doubletapp.habittracker.domain.repository.IRepository;
import course.doubletapp.habittracker.domain.uc.HabitsUseCase;
import course.doubletapp.habittracker.ui.habitcreate.HabitCreateFragment;
import course.doubletapp.habittracker.ui.habitcreate.HabitCreateFragment_MembersInjector;
import course.doubletapp.habittracker.ui.habitlist.HabitListFragment;
import course.doubletapp.habittracker.ui.habitlist.HabitListFragment_MembersInjector;
import course.doubletapp.habittracker.vm.HabitCreateViewModel;
import course.doubletapp.habittracker.vm.HabitListViewModelFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent {
  private DaggerAppComponent() {
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private static final class Builder implements AppComponent.Builder {
    private Context context;

    @Override
    public Builder context(Context context) {
      this.context = Preconditions.checkNotNull(context);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(context, Context.class);
      return new AppComponentImpl(new RepositoryModule(), new NetworkModel(), new DatabaseModule(), context);
    }
  }

  private static final class HabitCreateSubComponentBuilder implements HabitCreateSubComponent.Builder {
    private final AppComponentImpl appComponentImpl;

    private HabitCreateSubComponentBuilder(AppComponentImpl appComponentImpl) {
      this.appComponentImpl = appComponentImpl;
    }

    @Override
    public HabitCreateSubComponent build() {
      return new HabitCreateSubComponentImpl(appComponentImpl);
    }
  }

  private static final class HabitListFactorySubComponentBuilder implements HabitListFactorySubComponent.Builder {
    private final AppComponentImpl appComponentImpl;

    private HabitListFactorySubComponentBuilder(AppComponentImpl appComponentImpl) {
      this.appComponentImpl = appComponentImpl;
    }

    @Override
    public HabitListFactorySubComponent build() {
      return new HabitListFactorySubComponentImpl(appComponentImpl);
    }
  }

  private static final class HabitCreateSubComponentImpl implements HabitCreateSubComponent {
    private final AppComponentImpl appComponentImpl;

    private final HabitCreateSubComponentImpl habitCreateSubComponentImpl = this;

    private HabitCreateSubComponentImpl(AppComponentImpl appComponentImpl) {
      this.appComponentImpl = appComponentImpl;


    }

    private HabitCreateViewModel habitCreateViewModel() {
      return new HabitCreateViewModel(appComponentImpl.getHabitUseCase());
    }

    @Override
    public void inject(HabitCreateFragment habitCreateFragment) {
      injectHabitCreateFragment(habitCreateFragment);
    }

    private HabitCreateFragment injectHabitCreateFragment(HabitCreateFragment instance) {
      HabitCreateFragment_MembersInjector.injectHabitCreateViewModel(instance, habitCreateViewModel());
      return instance;
    }
  }

  private static final class HabitListFactorySubComponentImpl implements HabitListFactorySubComponent {
    private final AppComponentImpl appComponentImpl;

    private final HabitListFactorySubComponentImpl habitListFactorySubComponentImpl = this;

    private HabitListFactorySubComponentImpl(AppComponentImpl appComponentImpl) {
      this.appComponentImpl = appComponentImpl;


    }

    private HabitListViewModelFactory habitListViewModelFactory() {
      return new HabitListViewModelFactory(appComponentImpl.getHabitUseCase());
    }

    @Override
    public void inject(HabitListFragment habitListFragment) {
      injectHabitListFragment(habitListFragment);
    }

    private HabitListFragment injectHabitListFragment(HabitListFragment instance) {
      HabitListFragment_MembersInjector.injectHabitListViewModelFactory(instance, habitListViewModelFactory());
      return instance;
    }
  }

  private static final class AppComponentImpl implements AppComponent {
    private final AppComponentImpl appComponentImpl = this;

    private Provider<Context> contextProvider;

    private Provider<HabitDataBase> provideDatabaseProvider;

    private Provider<HabitDao> provideDaoProvider;

    private Provider<OkHttpClient> provideHttpClientProvider;

    private Provider<HabitServerAPI> provideHabitServerAPIProvider;

    private Provider<IRepository> provideRepositoryProvider;

    private AppComponentImpl(RepositoryModule repositoryModuleParam, NetworkModel networkModelParam,
        DatabaseModule databaseModuleParam, Context contextParam) {

      initialize(repositoryModuleParam, networkModelParam, databaseModuleParam, contextParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final RepositoryModule repositoryModuleParam,
        final NetworkModel networkModelParam, final DatabaseModule databaseModuleParam,
        final Context contextParam) {
      this.contextProvider = InstanceFactory.create(contextParam);
      this.provideDatabaseProvider = DoubleCheck.provider(DatabaseModule_ProvideDatabaseFactory.create(databaseModuleParam, contextProvider));
      this.provideDaoProvider = DoubleCheck.provider(DatabaseModule_ProvideDaoFactory.create(databaseModuleParam, provideDatabaseProvider));
      this.provideHttpClientProvider = DoubleCheck.provider(NetworkModel_ProvideHttpClientFactory.create(networkModelParam));
      this.provideHabitServerAPIProvider = DoubleCheck.provider(NetworkModel_ProvideHabitServerAPIFactory.create(networkModelParam, provideHttpClientProvider));
      this.provideRepositoryProvider = DoubleCheck.provider(RepositoryModule_ProvideRepositoryFactory.create(repositoryModuleParam, provideDaoProvider, provideHabitServerAPIProvider));
    }

    @Override
    public HabitsUseCase getHabitUseCase() {
      return new HabitsUseCase(provideRepositoryProvider.get());
    }

    @Override
    public HabitCreateSubComponent.Builder habitCreateSubComponent() {
      return new HabitCreateSubComponentBuilder(appComponentImpl);
    }

    @Override
    public HabitListFactorySubComponent.Builder habitListSubComponent() {
      return new HabitListFactorySubComponentBuilder(appComponentImpl);
    }
  }
}
